
=============== B N F ==============

<PROGRAM>       = <INIT_PROGRAM> <MAIN_PROGRAM> 

<INIT_PROGRAM>  = <INIT_PROGRAM> <INIT_PROGRAM>
<INIT_PROGRAM>  = <DECLARATIONS> <END_LINE>
<INIT_PROGRAM>  = <ATTRIBUTIONS> <END_LINE>
<INIT_PROGRAM>  = <FUNCTION_BLOCK>
 
<MAIN_PROGRAM> = <BEGIN> <CODE_BLOCK> <END>

<CODE_BLOCK>   = <CODE_BLOCK>   <CODE_BLOCK>   
<CODE_BLOCK>   = <DECLARATIONS> <END_LINE>
<CODE_BLOCK>   = <ATTRIBUTIONS> <END_LINE>
<CODE_BLOCK>   = <FUNCTION_BLOCK>
<CODE_BLOCK>   = <LOOP_BLOCK> 
<CODE_BLOCK>   = <RETURN_EXPRESSION> <END_LINE> 

<DECLARATIONS>   = <ARRAY_DECLARATION> 
<DECLARATIONS>   = <VARIABLE_DECLARATION>

<ARRAY_DECLARATION>     = <TYPE> <IDENTIFIER> <ARRAY_SEPARATOR_OPEN>  <ARRAY_SEPARATOR_CLOSE> 
<VARIABLE_DECLARATION>  = <TYPE> <IDENTIFIER_SEQUENCE>                                                                         

<ATTRIBUTIONS>      = <ATTRIBUTION> 
<ATTRIBUTIONS>      = <ARRAY_ATTRIBUTION>

<ATTRIBUTION>        = <IDENTIFIER> <ATTRIBUITING_OPERATOR> <ALL_ELEMENTS>

<ARRAY_ATTRIBUTION>  = <IDENTIFIER> <ATTRIBUITING_OPERATOR> <ARRAY_SEPARATOR_OPEN> <LITERAL_SEQUENCE> <ARRAY_SEPARATOR_CLOSE>

<LITERAL_SEQUENCE>    = <NUMBER>
<LITERAL_SEQUENCE>    = <NUMBER> <IDENTIFIER_SEPARATOR> <LITERAL_SEQUENCE> 
      
<IDENTIFIER_SEQUENCE>        = <IDENTIFIER> 
<IDENTIFIER_SEQUENCE>        = <IDENTIFIER> <IDENTIFIER_SEPARATOR> <IDENTIFIER_SEQUENCE>  

<TYPED_IDENTIFIER_SEQUENCE>  = <TYPE> <IDENTIFIER>  
<TYPED_IDENTIFIER_SEQUENCE>  = <TYPE> <IDENTIFIER> <IDENTIFIER_SEPARATOR> <TYPED_IDENTIFIER_SEQUENCE>

<FUNCTION_BLOCK>        = <TYPE>  <IDENTIFIER>  <FUNCTION_ARGS> 
                           <CONTEXT_SEPARATOR_OPEN> 
                                <CODE_BLOCK>      
                           <CONTEXT_SEPARATOR_CLOSE>   

<LOOP_BLOCK>            = <LOOP_NAME> <PRIMARY_SEPARATOR_OPEN> <COMPARISON_EXPRESSION> <PRIMARY_SEPARATOR_CLOSE>
                           <CONTEXT_SEPARATOR_OPEN> 
                                <CODE_BLOCK>      
                           <CONTEXT_SEPARATOR_CLOSE>                                                 

<FUNCTION_CALL>         = <IDENTIFIER> <FUNCTION_ARGS>

<FUNCTION_ARGS>         = <PRIMARY_SEPARATOR_OPEN> <PRIMARY_SEPARATOR_CLOSE>
<FUNCTION_ARGS>         = <PRIMARY_SEPARATOR_OPEN> <TYPE>      <IDENTIFIER>    <PRIMARY_SEPARATOR_CLOSE>                                   
<FUNCTION_ARGS>         = <PRIMARY_SEPARATOR_OPEN> <TYPED_IDENTIFIER_SEQUENCE> <PRIMARY_SEPARATOR_CLOSE> 
<FUNCTION_ARGS>         = <PRIMARY_SEPARATOR_OPEN> <EXPRESSION>                <PRIMARY_SEPARATOR_CLOSE> 
<FUNCTION_ARGS>         = <PRIMARY_SEPARATOR_OPEN> <LITERAL_SEQUENCE>          <PRIMARY_SEPARATOR_CLOSE>                                  

<EXPRESSION>            = <PRIMARY_SEPARATOR_OPEN> <BASIC_ELEMENTS> <OPERATOR> <BASIC_ELEMENTS> <PRIMARY_SEPARATOR_CLOSE> 
<EXPRESSION>            = <PRIMARY_SEPARATOR_OPEN> <BASIC_ELEMENTS> <OPERATOR> <EXPRESSION>     <PRIMARY_SEPARATOR_CLOSE> 

<COMPARISON_EXPRESSION> = <COMPLEX_ELEMENTS> <COMPASISON_OPERATOR> <COMPLEX_ELEMENTS>                                                                                

<BASIC_ELEMENTS>    = <NUMBER>
<BASIC_ELEMENTS>    = <IDENTIFIER>
<BASIC_ELEMENTS>    = <FUNCTION_CALL>

<COMPLEX_ELEMENTS>  = <BASIC_ELEMENTS>
<COMPLEX_ELEMENTS>  = <EXPRESSION>

<ALL_ELEMENTS>      = <COMPLEX_ELEMENTS>
<ALL_ELEMENTS>      = <TEXT>
<ALL_ELEMENTS>      = <BOOLEAN>

<RETURN_EXPRESSION>     = <RETURN> <ALL_ELEMENTS>

<OPERATOR>           = <BASIC_OPERATOR>
<OPERATOR>           = <COMPLEX_OPERATOR>

<IDENTIFIER>                    = REGEX(/A...Z/)
<NUMBER>                        = REGEX(/1...0/)                      

<TEXT>                          = REGEX('(/A...Z/)')

<END_LINE>                      = ;
<BEGIN>                         = INICIO
<END>                           = FIM
<LOOP_NAME>                     = ENQUANTO
<RETURN>                        = RETORNAR

<BOOLEAN>                       = TRUE
<BOOLEAN>                       = FALSE

<ATTRIBUITING_OPERATOR>         = = 

<COMPASISON_OPERATOR>           = == 
<COMPASISON_OPERATOR>           = >
<COMPASISON_OPERATOR>           = <

<BASIC_OPERATOR>                = + 
<BASIC_OPERATOR>                = -

<COMPLEX_OPERATOR>              = * 
<COMPLEX_OPERATOR>              = /

<TYPE>                          = BOOLEAN
<TYPE>                          = NUMERO
<TYPE>                          = TEXTO

<COMMENTARY_BEGIN>              = /*
<COMMENTARY_END>                = */

<VARIABLE_SEPARATOR>            = ,

<PRIMARY_SEPARATOR_OPEN>        = (
<PRIMARY_SEPARATOR_CLOSE>       = )

<ARRAY_SEPARATOR_OPEN>          = [
<ARRAY_SEPARATOR_CLOSE>         = ]

<CONTEXT_SEPARATOR_OPEN>        = {
<CONTEXT_SEPARATOR_CLOSE>       = }

================ CODE SAMPLE===================

/*  
    comentario de           
    multi-linha             
*/    

numero a,b,c;              
texto  b;       
numero c;  
numero z[];

b = "rhuan victor"
z = [1,2,3,4,5]  
c = ((1+2)-1)          
c = 20 + x(a,b);    

numero x(texto b, numero c){
    numero a,b,c;              
    texto  b;       
    numero c;  
    numero z[];

    b = "rhuan victor"
    z = [1,2,3,4,5]  
    c = ((1+2)-1)          
    c = 20 + x(a,b);

    ENQUANTO(x==z){
        ENQUANTO( ((x+2)+y) == isTrue(5)  ){

        }
    }

    WHILE( x()==z() ){

    }

    retorna c;
    retorna "RHUAN";
    retorna ((c+b)-d);
    retorna x(a+b);
}

INICIO
    numero a, b, c;
    x = x();         
    x = x(a,b);      
    z = (a+b)/c;     

    retorna x;               
    retorna a+b;             
    retorna x(); 

    ENQUANTO(x>z){

    }

    funcao(a,b,c);            
FIM

========================= TODO
- BNF CREATOR
- LÃŠ E VAI CRIANDO ARVORE
- COLORIR
- fazer BOOLEAN
- tratar questao do numero negativo com operador
