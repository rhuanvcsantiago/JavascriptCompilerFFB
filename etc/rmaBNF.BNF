
=============== B N F ==============

<PROGRAM>       := <INIT_PROGRAM> <MAIN_PROGRAM> 

<INIT_PROGRAM>  := <INIT_PROGRAM> <INIT_PROGRAM>
<INIT_PROGRAM>  := <DECLARATIONS> <END_LINE>
<INIT_PROGRAM>  := <ATTRIBUTIONS> <END_LINE>
<INIT_PROGRAM>  := <FUNCTION_BLOCK>
 
<MAIN_PROGRAM>  := <BEGIN> <CODE_BLOCK> <END>

<CODE_BLOCK>   := <CODE_BLOCK> <CODE_BLOCK>   
<CODE_BLOCK>   := <DECLARATIONS> <END_LINE>
<CODE_BLOCK>   := <ATTRIBUTIONS>  <END_LINE>
<CODE_BLOCK>   := <FUNCTION_BLOCK>
<CODE_BLOCK>   := <LOOP_BLOCK> 
<CODE_BLOCK>   := <RETURN_EXPRESSION> <END_LINE> 

<DECLARATIONS>   := <ARRAY_DECLARATION> 
<DECLARATIONS>   := <VARIABLE_DECLARATION>

<ARRAY_DECLARATION>     =: <TYPE> <IDENTIFIER> <ARRAY_SEPARATOR_OPEN>  <ARRAY_SEPARATOR_CLOSE> 
<VARIABLE_DECLARATION>  =: <TYPE> <IDENTIFIER>                                                                         
<VARIABLE_DECLARATION>  =: <TYPE> <IDENTIFIER_SEQUENCE>

<ATTRIBUTIONS>      =: <ATTRIBUTION> 
<ATTRIBUTIONS>      =: <ARRAY_ATTRIBUTION>

<ATTRIBUTION>        =: <IDENTIFIER> <ATTRIBUITING_OPERATOR> <EXPRESSION>
<ATTRIBUTION>        =: <IDENTIFIER> <ATTRIBUITING_OPERATOR> <NUMBER> 
<ATTRIBUTION>        =: <IDENTIFIER> <ATTRIBUITING_OPERATOR> <IDENTIFIER>    
<ATTRIBUTION>        =: <IDENTIFIER> <ATTRIBUITING_OPERATOR> <TEXT> 
<ATTRIBUTION>        =: <IDENTIFIER> <ATTRIBUITING_OPERATOR> <FUNCTION_CALL> 
<ATTRIBUTION>        =: <IDENTIFIER> <ATTRIBUITING_OPERATOR> <BOOLEAN>

<ARRAY_ATTRIBUTION>   =: <IDENTIFIER> <ATTRIBUITING_OPERATOR> <ARRAY_SEPARATOR_OPEN> <NUMBER> <ARRAY_SEPARATOR_CLOSE>
<ARRAY_ATTRIBUTION>   =: <IDENTIFIER> <ATTRIBUITING_OPERATOR> <ARRAY_SEPARATOR_OPEN> <LITERAL_SEQUENCE> <ARRAY_SEPARATOR_CLOSE>

<LITERAL_SEQUENCE>    =: <NUMBER> <IDENTIFIER_SEPARATOR> <LITERAL_SEQUENCE> 
<LITERAL_SEQUENCE>    =: <NUMBER> <IDENTIFIER_SEPARATOR> <NUMBER>       

<IDENTIFIER_SEQUENCE>         =: <IDENTIFIER> <IDENTIFIER_SEPARATOR> <IDENTIFIER_SEQUENCE> 
<IDENTIFIER_SEQUENCE>         =: <IDENTIFIER> <IDENTIFIER_SEPARATOR> <IDENTIFIER>
<TYPED_IDENTIFIER_SEQUENCE>   =: <IDENTIFIER> <IDENTIFIER_SEPARATOR> <IDENTIFIER>

 
<FUNCTION_BLOCK>        =: <TYPE>  <IDENTIFIER>  <FUNCTION_ARGS> 
                           <CONTEXT_SEPARATOR_OPEN> 
                                <CODE_BLOCK>      
                           <CONTEXT_SEPARATOR_CLOSE>   

<LOOP_BLOCK>            =: <LOOP_NAME> <PRIMARY_SEPARATOR_OPEN> <COMPARISON_EXPRESSION> <PRIMARY_SEPARATOR_CLOSE>
                           <CONTEXT_SEPARATOR_OPEN> 
                                <CODE_BLOCK>      
                           <CONTEXT_SEPARATOR_CLOSE>                                                 

<FUNCTION_CALL>         =: <IDENTIFIER> <FUNCTION_ARGS>

<FUNCTION_ARGS>         =: <PRIMARY_SEPARATOR_OPEN> <PRIMARY_SEPARATOR_CLOSE>
<FUNCTION_ARGS>         =: <PRIMARY_SEPARATOR_OPEN> <TYPE> <IDENTIFIER>         <PRIMARY_SEPARATOR_CLOSE>                                   
<FUNCTION_ARGS>         =: <PRIMARY_SEPARATOR_OPEN> <TYPED_IDENTIFIER_SEQUENCE> <PRIMARY_SEPARATOR_CLOSE> 
<FUNCTION_ARGS>         =: <PRIMARY_SEPARATOR_OPEN> <EXPRESSION>                <PRIMARY_SEPARATOR_CLOSE> 
<FUNCTION_ARGS>         =: <PRIMARY_SEPARATOR_OPEN> <LITERAL_SEQUENCE>          <PRIMARY_SEPARATOR_CLOSE>                                  

<EXPRESSION>         =: <PRIMARY_SEPARATOR_OPEN>  <BASIC_EXPRESSION>    <OPERATOR>  <BASIC_EXPRESSION>    <PRIMARY_SEPARATOR_CLOSE>
<EXPRESSION>         =: <PRIMARY_SEPARATOR_OPEN>  <COMPLEX_EXPRESSION>  <OPERATOR>  <COMPLEX_EXPRESSION>  <PRIMARY_SEPARATOR_CLOSE>                                                                                    

<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <IDENTIFIER>     <OPERATOR>  <NUMBER>         <PRIMARY_SEPARATOR_CLOSE>                                                                                  
<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <IDENTIFIER>     <OPERATOR>  <IDENTIFIER>     <PRIMARY_SEPARATOR_CLOSE> 
<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <IDENTIFIER>     <OPERATOR>  <FUNCTION_CALL>  <PRIMARY_SEPARATOR_CLOSE>

<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <FUNCTION_CALL>  <OPERATOR>  <NUMBER>         <PRIMARY_SEPARATOR_CLOSE>                                                                                 
<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <FUNCTION_CALL>  <OPERATOR>  <IDENTIFIER>     <PRIMARY_SEPARATOR_CLOSE>
<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <FUNCTION_CALL>  <OPERATOR>  <FUNCTION_CALL>  <PRIMARY_SEPARATOR_CLOSE>

<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <NUMBER>         <OPERATOR>  <NUMBER>         <PRIMARY_SEPARATOR_CLOSE>                                                                                   
<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <NUMBER>         <OPERATOR>  <IDENTIFIER>     <PRIMARY_SEPARATOR_CLOSE> 
<BASIC_EXPRESSION>   =: <PRIMARY_SEPARATOR_OPEN> <NUMBER>         <OPERATOR>  <FUNCTION_CALL>  <PRIMARY_SEPARATOR_CLOSE>

<COMPARISON_EXPRESSION> =: <IDENTIFIER> <COMPASISON_OPERATOR> <IDENTIFIER>
<COMPARISON_EXPRESSION> =: <IDENTIFIER> <COMPASISON_OPERATOR> <NUMBER>
<COMPARISON_EXPRESSION> =: <IDENTIFIER> <COMPASISON_OPERATOR> <EXPRESSION>
<COMPARISON_EXPRESSION> =: <IDENTIFIER> <COMPASISON_OPERATOR> <FUNCTION_CALL>

<COMPARISON_EXPRESSION> =: <EXPRESSION> <COMPASISON_OPERATOR> <IDENTIFIER> 
<COMPARISON_EXPRESSION> =: <EXPRESSION> <COMPASISON_OPERATOR> <NUMBER>
<COMPARISON_EXPRESSION> =: <EXPRESSION> <COMPASISON_OPERATOR> <EXPRESSION>
<COMPARISON_EXPRESSION> =: <EXPRESSION> <COMPASISON_OPERATOR> <FUNCTION_CALL>

<COMPARISON_EXPRESSION> =: <NUMBER> <COMPASISON_OPERATOR> <IDENTIFIER>
<COMPARISON_EXPRESSION> =: <NUMBER> <COMPASISON_OPERATOR> <NUMBER>
<COMPARISON_EXPRESSION> =: <NUMBER> <COMPASISON_OPERATOR> <EXPRESSION>
<COMPARISON_EXPRESSION> =: <NUMBER> <COMPASISON_OPERATOR> <FUNCTION_CALL>

<COMPARISON_EXPRESSION> =: <FUNCTION_CALL> <COMPASISON_OPERATOR> <IDENTIFIER>
<COMPARISON_EXPRESSION> =: <FUNCTION_CALL> <COMPASISON_OPERATOR> <NUMBER>
<COMPARISON_EXPRESSION> =: <FUNCTION_CALL> <COMPASISON_OPERATOR> <EXPRESSION>
<COMPARISON_EXPRESSION> =: <FUNCTION_CALL> <COMPASISON_OPERATOR> <FUNCTION_CALL>

<RETURN_EXPRESSION>     =: <RETURN> <IDENTIFIER>
<RETURN_EXPRESSION>     =: <RETURN> <NUMBER>  
<RETURN_EXPRESSION>     =: <RETURN> <EXPRESSION> 
<RETURN_EXPRESSION>     =: <RETURN> <FUNCTION_CALL> 
<RETURN_EXPRESSION>     =: <RETURN> <TEXTO> 

<OPERATOR>           =: <BASIC_OPERATOR>
<OPERATOR>           =: <COMPLEX_OPERATOR>

<IDENTIFIER>                    =: REGEX(/A...Z/)
<NUMBER>                        =: REGEX(/1...0/)                      

<TEXT>                          =: REGEX('(/A...Z/)')

<END_LINE>                      =: ;
<BEGIN>                         =: INICIO
<END>                           =: FIM
<LOOP_NAME>                     =: ENQUANTO
<RETURN>                        =: RETORNAR

<BOOLEAN>                       =: TRUE
<BOOLEAN>                       =: FALSE

<ATTRIBUITING_OPERATOR>         =: = 

<COMPASISON_OPERATOR>           =: == 
<COMPASISON_OPERATOR>           =: >
<COMPASISON_OPERATOR>           =: <

<BASIC_OPERATOR>                =: + 
<BASIC_OPERATOR>                =: -

<COMPLEX_OPERATOR>              =: * 
<COMPLEX_OPERATOR>              =: /

<TYPE>                          =: BOOLEAN
<TYPE>                          =: NUMERO
<TYPE>                          =: TEXTO

<COMMENTARY_BEGIN>              =: /*
<COMMENTARY_END>                =: */

<VARIABLE_SEPARATOR>            =: ,

<PRIMARY_SEPARATOR_OPEN>        =: (
<PRIMARY_SEPARATOR_CLOSE>       =: )

<ARRAY_SEPARATOR_OPEN>          =: [
<ARRAY_SEPARATOR_CLOSE>         =: ]

<CONTEXT_SEPARATOR_OPEN>        =: {
<CONTEXT_SEPARATOR_CLOSE>       =: }

================ CODE SAMPLE===================

// comentario de linha simples

/*  
    comentario de           
    multi-linha             
*/    

numero a,b,c;              
texto  b;       
numero c;  
numero z[];

b = "rhuan victor"
z = [1,2,3,4,5]  
c = ((1+2)-1)          
c = 20 + x(a,b);    

numero x(texto b, numero c){
    numero a,b,c;              
    texto  b;       
    numero c;  
    numero z[];

    b = "rhuan victor"
    z = [1,2,3,4,5]  
    c = ((1+2)-1)          
    c = 20 + x(a,b);

    ENQUANTO(x==z){
        ENQUANTO( ((x+2)+y) == isTrue(5)  ){

        }
    }

    WHILE( x()==z() ){

    }

    retorna c;
    retorna "RHUAN";
    retorna ((c+b)-d);
    retorna x(a+b);
}

INICIO
    numero a, b, c;
    x = x();         
    x = x(a,b);      
    z = (a+b)/c;     

    retorna x;               
    retorna a+b;             
    retorna x(); 

    ENQUANTO(x>z){

    }

    funcao(a,b,c);            
FIM


========================= TODO
- BNF CREATOR
- LÃŠ E VAI CRIANDO ARVORE
- COLORIR
- fazer BOOLEAN
- tratar questao do numero negativo com operador
